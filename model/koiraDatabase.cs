using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;
using System.Xml.Linq;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Windows.Forms;

namespace DogForm
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var welcome = Welcome.FromJson(jsonString);

    public partial class KoiraOlio
    {
        [JsonProperty("weight")]
        public Eight Weight { get; set; }

        [JsonProperty("height")]
        public Eight Height { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("bred_for")] //, NullValueHandling = NullValueHandling.Ignore)]
        public string BredFor { get; set; }

        [JsonProperty("breed_group")] //, NullValueHandling = NullValueHandling.Ignore)]
        public BreedGroup? BreedGroup { get; set; }

        [JsonProperty("life_span")]
        public string LifeSpan { get; set; }

        [JsonProperty("temperament", NullValueHandling = NullValueHandling.Ignore)]
        public string Temperament { get; set; }

        [JsonProperty("origin", NullValueHandling = NullValueHandling.Ignore)]
        public string Origin { get; set; }

        [JsonProperty("reference_image_id")]
        public string ReferenceImageId { get; set; }

        [JsonProperty("country_code", NullValueHandling = NullValueHandling.Ignore)]
        public CountryCode CountryCode { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("history", NullValueHandling = NullValueHandling.Ignore)]
        public string History { get; set; }

        public List<KoiraOlio> LopullinenLista { get; set; }

        public KoiraOlio(string BredForx, string Descriptionx, string Historyx, string LifeSpanx,
            string Namex, string Originx, string ReferenceImageIdx, string Temperamentx, Eight Heightx,
            Eight Weightx, long Idx, BreedGroup? BreedGroupx, CountryCode CountryCodex)
        {
            this.BredFor = BredForx;
            this.Description = Descriptionx;
            this.History = Historyx;
            this.LifeSpan = LifeSpanx;
            this.Name = Namex;
            this.Origin = Originx;
            this.ReferenceImageId = ReferenceImageIdx;
            this.Temperament = Temperamentx;
            this.Height = Heightx;
            this.Weight = Weightx;
            this.Id = Idx;
            this.BreedGroup = BreedGroupx;
            this.CountryCode = CountryCodex;

        }
    }
    public partial class Eight
    {
        [JsonProperty("imperial")]
        public string Imperial { get; set; }

        [JsonProperty("metric")]
        public string Metric { get; set; }
    }

    public enum BreedGroup { Empty, Herding, Hound, Mixed, Non_Sporting, NonSporting, Sporting, Terrier, Toy, Working };

    public enum CountryCode { Ag, Au, Us };

    public partial class Welcome
    {
        public static Welcome[] FromJson(string json) => JsonConvert.DeserializeObject<Welcome[]>(json);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome[] self) => JsonConvert.SerializeObject(self);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                BreedGroupConverter.Singleton,
                CountryCodeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            }
        };
    }

    internal class BreedGroupConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(string) || t == typeof(BreedGroup) || t == typeof(BreedGroup);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            try
            {
                if(reader == null|| reader.Value == null) return BreedGroup.Empty; ;
                var value = serializer.Deserialize<string>(reader);
                if (value == null) return BreedGroup.Empty;
                //if (string.IsNullOrEmpty(value)) return BreedGroup.Empty; // Lisätty 7.2 tarkistus tyhjälle tai nullille
                switch (value)
                {
                    case "BreedGoup":
                        return BreedGroup.Empty;
                    case "Herding":
                        return BreedGroup.Herding;
                    case "Hound":
                        return BreedGroup.Hound;
                    case "Mixed":
                        return BreedGroup.Mixed;
                    case "Non-Sporting":
                        return BreedGroup.Non_Sporting;
                    case "NonSporting":
                        return BreedGroup.NonSporting;
                    case "Sporting":
                        return BreedGroup.Sporting;
                    case "Terrier":
                        return BreedGroup.Terrier;
                    case "Toy":
                        return BreedGroup.Toy;
                    case "Working":
                        return BreedGroup.Working;
                }
                return BreedGroup.Empty;
            }
            catch { return BreedGroup.Empty; }
        }


        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (BreedGroup)untypedValue;
            switch (value)
            {
                case BreedGroup.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case BreedGroup.Herding:
                    serializer.Serialize(writer, "Herding");
                    return;
                case BreedGroup.Hound:
                    serializer.Serialize(writer, "Hound");
                    return;
                case BreedGroup.Mixed:
                    serializer.Serialize(writer, "Mixed");
                    return;
                case BreedGroup.Non_Sporting:
                    serializer.Serialize(writer, "Non-Sporting");
                    return;
                case BreedGroup.NonSporting:
                    serializer.Serialize(writer, "NonSporting");
                    return;
                case BreedGroup.Sporting:
                    serializer.Serialize(writer, "Sporting");
                    return;
                case BreedGroup.Terrier:
                    serializer.Serialize(writer, "Terrier");
                    return;
                case BreedGroup.Toy:
                    serializer.Serialize(writer, "Toy");
                    return;
                case BreedGroup.Working:
                    serializer.Serialize(writer, "Working");
                    return;
            }
            throw new Exception("Cannot marshal type BreedGroup");
        }

        public static readonly BreedGroupConverter Singleton = new BreedGroupConverter();
    }

    internal class CountryCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CountryCode) || t == typeof(CountryCode);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AG":
                    return CountryCode.Ag;
                case "AU":
                    return CountryCode.Au;
                case "US":
                    return CountryCode.Us;
            }
            throw new Exception("Cannot unmarshal type CountryCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CountryCode)untypedValue;
            switch (value)
            {
                case CountryCode.Ag:
                    serializer.Serialize(writer, "AG");
                    return;
                case CountryCode.Au:
                    serializer.Serialize(writer, "AU");
                    return;
                case CountryCode.Us:
                    serializer.Serialize(writer, "US");
                    return;
            }
            throw new Exception("Cannot marshal type CountryCode");
        }

        public static readonly CountryCodeConverter Singleton = new CountryCodeConverter();
    }
}

